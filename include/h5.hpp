// Copyright snsinfu 2019.
// Distributed under the Boost Software License, Version 1.0.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef INCLUDED_SNSINFU_H5_HPP
#define INCLUDED_SNSINFU_H5_HPP

#include <cstdint>
#include <stdexcept>
#include <string>
#include <utility>

#include <hdf5.h>


namespace h5
{
    // EXCEPTION -------------------------------------------------------------

    // The exception class used to report an error.
    class exception : public std::runtime_error
    {
    public:
        explicit exception(std::string const& msg)
            : std::runtime_error{msg}
        {
        }
    };


    // RAII ------------------------------------------------------------------

    // Thin RAII wrapper for an hid_t.
    template<herr_t(& close_fn)(hid_t)>
    class unique_hid
    {
    public:
        // The default constructor creates an empty object.
        unique_hid() = default;

        // The constructor takes
        unique_hid(hid_t hid)
            : _hid{hid}
        {
        }

        ~unique_hid() noexcept
        {
            if (_hid >= 0) {
                close_fn(_hid);
            }
        }

        unique_hid(unique_hid const&) = delete;

        unique_hid(unique_hid&& other) noexcept
        {
            swap(other);
        }

        unique_hid& operator=(unique_hid&& other) noexcept
        {
            unique_hid tmp = std::move(other);
            swap(tmp);
            return *this;
        }

        void swap(unique_hid& other) noexcept
        {
            auto tmp = _hid;
            _hid = other._hid;
            other._hid = tmp;
        }

        operator hid_t() const noexcept
        {
            return _hid;
        }

    private:
        hid_t _hid = -1;
    };


    // FILE HANDLING ---------------------------------------------------------

    namespace detail
    {
        // Opens an existing HDF5 file.
        inline
        h5::unique_hid<H5Fclose>
        do_open_file(std::string const& filename, bool readonly)
        {
            h5::unique_hid<H5Fclose> file = H5Fopen(
                filename.c_str(),
                readonly ? H5F_ACC_RDONLY : H5F_ACC_RDWR,
                H5P_DEFAULT
            );
            if (file < 0) {
                throw h5::exception("cannot open file");
            }
            return file;
        }


        // Creates an empty HDF5 file.
        inline
        h5::unique_hid<H5Fclose>
        do_create_file(std::string const& filename, bool truncate)
        {
            h5::unique_hid<H5Fclose> file = H5Fcreate(
                filename.c_str(),
                truncate ? H5F_ACC_TRUNC : H5F_ACC_EXCL,
                H5P_DEFAULT,
                H5P_DEFAULT
            );
            if (file < 0) {
                throw h5::exception("cannot create file");
            }
            return file;
        }


        // Opens or creates an HDF5 file based on given mode string.
        inline
        h5::unique_hid<H5Fclose>
        open_file(std::string const& filename, std::string const& mode)
        {
            if (mode == "r") {
                return detail::do_open_file(filename, true);
            }
            if (mode == "r+") {
                return detail::do_open_file(filename, false);
            }
            if (mode == "w") {
                return detail::do_create_file(filename, true);
            }
            if (mode == "w-") {
                return detail::do_create_file(filename, false);
            }
            throw h5::exception("unrecognized file mode");
        }
    }


    // A `file` object provides access to datasets in an HDF5 file.
    class file
    {
    public:
        // Opens or creates an HDF5 file.
        //
        // Parameters:
        //   filename = Path to the HDF5 file.
        //   mode     = One of these four strings: r, r+, w or w-.
        //
        // | Mode | Meaning                                   |
        // |------|-------------------------------------------|
        // | r    | Read only. File must exist.               |
        // | r+   | Read-write. File must exist.              |
        // | w    | Read-write. File is created or truncated. |
        // | w-   | Read-write. File must not exist.          |
        //
        file(std::string const& filename, std::string const& mode)
            : _file{detail::open_file(filename, mode)}
        {
        }

        // Returns the HID of the file.
        hid_t handle() const noexcept
        {
            return _file;
        }

    private:
        h5::unique_hid<H5Fclose> _file;
    };
}

#endif
